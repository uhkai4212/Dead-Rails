do
	local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))();
	local Window = Rayfield:CreateWindow({Name="Dead Rails 1.0",Icon=0,LoadingTitle="Dead Rails - Kureo",LoadingSubtitle="by Kureo",Theme="Default",DisableRayfieldPrompts=false,DisableBuildWarnings=false,ConfigurationSaving={Enabled=true,FolderName=nil,FileName="Big Hub"},Discord={Enabled=false,Invite="noinvitelink",RememberJoins=true},KeySystem=false,KeySettings={Title="Untitled",Subtitle="Key System",Note="No method of obtaining the key is provided",FileName="Key",SaveKey=true,GrabKeyFromSite=false,Key={"Hello"}}});
	local Tab = Window:CreateTab("Home", "layout-grid");
	local Section = Tab:CreateSection("Home");
	local Divider = Tab:CreateDivider();
	local Label = Tab:CreateLabel("Credits: Kureo11", "zap");
	local Label = Tab:CreateLabel("Join The Discord", "code");
	local Divider = Tab:CreateDivider();
	local Button = Tab:CreateButton({Name="Destroy",Callback=function()
		Rayfield:Destroy();
	end});
	local Tab = Window:CreateTab("Main", "scroll-text");
	local Section = Tab:CreateSection("Main");
	local Divider = Tab:CreateDivider();
	local player = game:GetService("Players").LocalPlayer;
	local character = player.Character or player.CharacterAdded:Wait();
	local humanoid = character:WaitForChild("Humanoid");
	local Slider = Tab:CreateSlider({Name="WalkSpeed",Range={16,19},Increment=1,Suffix="Speed",CurrentValue=16,Flag="WalkSpeedSlider",Callback=function(Value)
		humanoid.WalkSpeed = Value;
	end});
	player.CharacterAdded:Connect(function(newCharacter)
		humanoid = newCharacter:WaitForChild("Humanoid");
		humanoid.WalkSpeed = Slider.CurrentValue;
	end);
	local Divider = Tab:CreateDivider();
	local Button = Tab:CreateButton({Name="No Hold Delay",Callback=function()
		while true do
			wait(0.3);
			for i, v in ipairs(game:GetService("Workspace"):GetDescendants()) do
				if (v.ClassName == "ProximityPrompt") then
					v.HoldDuration = 0;
				end
			end
		end
	end});
	local Button = Tab:CreateButton({Name="Auto Pickup",Callback=function()
		local player = game:GetService("Players").LocalPlayer;
		local character = player.Character or player.CharacterAdded:Wait();
		local hrp = character:FindFirstChild("HumanoidRootPart");
		local function autoPickup()
			while task.wait(0.1) do
				for _, prompt in ipairs(workspace:GetDescendants()) do
					if (prompt:IsA("ProximityPrompt") and prompt.Enabled) then
						local distance = (hrp.Position - prompt.Parent.Position).Magnitude;
						if (distance <= prompt.MaxActivationDistance) then
							if (prompt.HoldDuration > 0) then
								fireproximityprompt(prompt, prompt.HoldDuration);
							else
								fireproximityprompt(prompt);
							end
						end
					end
				end
			end
		end
		task.spawn(autoPickup);
	end});
	local ReplicatedStorage = game:GetService("ReplicatedStorage");
	local RunService = game:GetService("RunService");
	local function getNil(name, class)
		for _, v in ipairs(getnilinstances()) do
			if ((v.ClassName == class) and (v.Name == name)) then
				return v;
			end
		end
	end
	local autoStoreEnabled = false;
	local itemsToStore = {};
	local function scanForItems()
		while autoStoreEnabled do
			local runtimeItems = workspace:FindFirstChild("RuntimeItems");
			if runtimeItems then
				local tempItems = {};
				for _, item in ipairs(runtimeItems:GetChildren()) do
					if item:IsA("Model") then
						table.insert(tempItems, getNil(item.Name, "Model") or item);
					end
				end
				itemsToStore = tempItems;
			end
			task.wait(1);
		end
	end
	local function fireStoreRemote()
		while autoStoreEnabled do
			for _, item in ipairs(itemsToStore) do
				ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("StoreItem"):FireServer(item);
				task.wait(0.1);
			end
			task.wait(0.33);
		end
	end
	local Toggle = Tab:CreateToggle({Name="Quick Store",CurrentValue=false,Flag="QuickStoreToggle",Callback=function(Value)
		autoStoreEnabled = Value;
		if autoStoreEnabled then
			task.spawn(scanForItems);
			task.spawn(fireStoreRemote);
		end
	end});
	local Divider = Tab:CreateDivider();
	local UserInputService = game:GetService("UserInputService");
	local VirtualInputManager = game:GetService("VirtualInputManager");
	local RunService = game:GetService("RunService");
	local autoClickerEnabled = false;
	local Toggle = Tab:CreateToggle({Name="Auto-Clicker",CurrentValue=false,Flag="AutoClickerToggle",Callback=function(Value)
		autoClickerEnabled = Value;
	end});
	local function autoClick()
		while autoClickerEnabled do
			if UserInputService.TouchEnabled then
				local screenSize = workspace.CurrentCamera.ViewportSize;
				local centerX, centerY = screenSize.X / 2, screenSize.Y / 2;
				VirtualInputManager:SendMouseButtonEvent(centerX, centerY, 0, true, game, 1);
				VirtualInputManager:SendMouseButtonEvent(centerX, centerY, 0, false, game, 1);
			else
				mouse1click();
			end
			task.wait(0.6);
		end
	end
	RunService.RenderStepped:Connect(function()
		if autoClickerEnabled then
			task.spawn(autoClick);
		end
	end);
	local ReplicatedStorage = game:GetService("ReplicatedStorage");
	local Players = game:GetService("Players");
	local RunService = game:GetService("RunService");
	local toolName = "Shovel";
	local range = 7;
	local player = Players.LocalPlayer;
	local character = player.Character or player.CharacterAdded:Wait();
	local humanoidRootPart = character:WaitForChild("HumanoidRootPart");
	local targetNames = {"Walker","Runner","Vampire","Werewolf","Outlaw"};
	local function getNil(name, class)
		for _, v in ipairs(getnilinstances()) do
			if ((v.ClassName == class) and (v.Name == name)) then
				return v;
			end
		end
	end
	local function equipTool()
		local tool = player.Backpack:FindFirstChild(toolName);
		if tool then
			player.Character.Humanoid:EquipTool(tool);
		end
	end
	local function fireEvent()
		local args = {[1]=Vector3.new(0.16885744035243988, -0.2970489263534546, 0.9398133158683777)};
		local swingEvent = getNil("SwingEvent", "RemoteEvent");
		if swingEvent then
			swingEvent:FireServer(unpack(args));
		end
	end
	local function checkForNPCs()
		while true do
			if not autoKillEnabled then
				return;
			end
			for _, v in pairs(workspace:GetDescendants()) do
				if (table.find(targetNames, v.Name) and (v:IsA("Model") or v:IsA("Part")) and v:FindFirstChild("HumanoidRootPart")) then
					local npcRootPart = v.HumanoidRootPart;
					if (npcRootPart and ((humanoidRootPart.Position - npcRootPart.Position).Magnitude <= range)) then
						fireEvent();
					end
				end
			end
			local randomBuildingsFolder = workspace:FindFirstChild("RandomBuildings");
			if randomBuildingsFolder then
				for _, v in pairs(randomBuildingsFolder:GetDescendants()) do
					if (table.find(targetNames, v.Name) and (v:IsA("Model") or v:IsA("Part")) and v:FindFirstChild("HumanoidRootPart")) then
						local npcRootPart = v.HumanoidRootPart;
						if (npcRootPart and ((humanoidRootPart.Position - npcRootPart.Position).Magnitude <= range)) then
							fireEvent();
						end
					end
				end
			end
			wait(0.1);
		end
	end
	local autoKillEnabled = false;
	local Toggle = Tab:CreateToggle({Name="Kill Aura",CurrentValue=false,Flag="KillAuraToggle",Callback=function(Value)
		autoKillEnabled = Value;
		if autoKillEnabled then
			equipTool();
			task.spawn(checkForNPCs);
		else
		end
	end});
	local Tab = Window:CreateTab("ESP", "person-standing");
	local Section = Tab:CreateSection("ESP");
	local RunService = game:GetService("RunService");
	local targetNames = {"Walker","Runner","Werewolf","Vampire","Outlaw","Goldbar","Gold Bar","Coal","Treasury Bond","Bond","Bandage","Snake Oil","Snake Coil"};
	local isHighlightingEnabled = false;
	local espColor = Color3.fromRGB(255, 255, 255);
	local function createNameTag(parent, name)
		if parent:FindFirstChild("NameTag") then
			return;
		end
		local billboard = Instance.new("BillboardGui");
		billboard.Name = "NameTag";
		billboard.Size = UDim2.new(0, 80, 0, 20);
		billboard.StudsOffset = Vector3.new(0, 2.5, 0);
		billboard.AlwaysOnTop = true;
		billboard.Parent = parent;
		local textLabel = Instance.new("TextLabel");
		textLabel.Size = UDim2.new(1, 0, 1, 0);
		textLabel.BackgroundTransparency = 1;
		textLabel.Text = name;
		textLabel.TextColor3 = Color3.new(1, 1, 1);
		textLabel.TextScaled = true;
		textLabel.Font = Enum.Font.Garamond;
		textLabel.Parent = billboard;
	end
	local function highlightObject(obj, name)
		if obj:FindFirstChild("Highlight") then
			return;
		end
		local highlight = Instance.new("Highlight");
		highlight.Name = "Highlight";
		highlight.Parent = obj;
		highlight.FillTransparency = 0.7;
		highlight.OutlineTransparency = 0.2;
		highlight.FillColor = espColor;
		highlight.OutlineColor = espColor;
		createNameTag(obj, name);
	end
	local function updateHighlights()
		if not isHighlightingEnabled then
			return;
		end
		for _, obj in ipairs(workspace:GetDescendants()) do
			if table.find(targetNames, obj.Name) then
				if (obj:IsA("Model") and obj.PrimaryPart) then
					highlightObject(obj.PrimaryPart, obj.Name);
				elseif obj:IsA("Part") then
					highlightObject(obj, obj.Name);
				end
			end
		end
	end
	local Toggle = Tab:CreateToggle({Name="ESP All",CurrentValue=false,Flag="HighlightToggle",Callback=function(Value)
		isHighlightingEnabled = Value;
		if not isHighlightingEnabled then
			for _, obj in ipairs(workspace:GetDescendants()) do
				if obj:FindFirstChild("Highlight") then
					obj.Highlight:Destroy();
				end
				if obj:FindFirstChild("NameTag") then
					obj.NameTag:Destroy();
				end
			end
		end
	end});
	local ColorPicker = Tab:CreateColorPicker({Name="ESP Color Picker",Color=Color3.fromRGB(255, 255, 255),Flag="ColorPicker1",Callback=function(Value)
		espColor = Value;
	end});
	RunService.Heartbeat:Connect(updateHighlights);
	local Divider = Tab:CreateDivider();
	local RunService = game:GetService("RunService");
	local targetNames = {"Walker","Runner","Werewolf","Vampire","Outlaw"};
	local isHighlightingEnabled = false;
	local espColor = Color3.fromRGB(255, 255, 255);
	local function createNameTag(parent, name)
		if parent:FindFirstChild("NameTag") then
			return;
		end
		local billboard = Instance.new("BillboardGui");
		billboard.Name = "NameTag";
		billboard.Size = UDim2.new(0, 80, 0, 20);
		billboard.StudsOffset = Vector3.new(0, 2.5, 0);
		billboard.AlwaysOnTop = true;
		billboard.Parent = parent;
		local textLabel = Instance.new("TextLabel");
		textLabel.Size = UDim2.new(1, 0, 1, 0);
		textLabel.BackgroundTransparency = 1;
		textLabel.Text = name;
		textLabel.TextColor3 = Color3.new(1, 1, 1);
		textLabel.TextScaled = true;
		textLabel.Font = Enum.Font.Garamond;
		textLabel.Parent = billboard;
	end
	local function highlightObject(obj, name)
		if obj:FindFirstChild("Highlight") then
			return;
		end
		local highlight = Instance.new("Highlight");
		highlight.Name = "Highlight";
		highlight.Parent = obj;
		highlight.FillTransparency = 0.7;
		highlight.OutlineTransparency = 0.2;
		highlight.FillColor = espColor;
		highlight.OutlineColor = espColor;
		createNameTag(obj, name);
	end
	local function updateHighlights()
		if not isHighlightingEnabled then
			return;
		end
		for _, obj in ipairs(workspace:GetDescendants()) do
			if table.find(targetNames, obj.Name) then
				if (obj:IsA("Model") and obj.PrimaryPart) then
					highlightObject(obj.PrimaryPart, obj.Name);
				elseif obj:IsA("Part") then
					highlightObject(obj, obj.Name);
				end
			end
		end
	end
	local Toggle = Tab:CreateToggle({Name="ESP Zombies",CurrentValue=false,Flag="HighlightToggle",Callback=function(Value)
		isHighlightingEnabled = Value;
		if not isHighlightingEnabled then
			for _, obj in ipairs(workspace:GetDescendants()) do
				if obj:FindFirstChild("Highlight") then
					obj.Highlight:Destroy();
				end
				if obj:FindFirstChild("NameTag") then
					obj.NameTag:Destroy();
				end
			end
		end
	end});
	local ColorPicker = Tab:CreateColorPicker({Name="ESP Color Picker",Color=Color3.fromRGB(255, 255, 255),Flag="ColorPicker1",Callback=function(Value)
		espColor = Value;
	end});
	RunService.Heartbeat:Connect(updateHighlights);
	local Divider = Tab:CreateDivider();
	local Tab = Window:CreateTab("Zombies", "audio-lines");
	local Section = Tab:CreateSection("Zombies");
	local Players = game:GetService("Players");
	local RunService = game:GetService("RunService");
	local LocalPlayer = Players.LocalPlayer;
	local Camera = workspace.CurrentCamera;
	local DETECT_DISTANCE = 100;
	local TARGET_NAMES = {"Walker","Runner","Vampire","Outlaw","Werewolf"};
	local IsTracking = false;
	local Smoothness = 0.1;
	local TargetNameMap = {};
	for _, name in ipairs(TARGET_NAMES) do
		TargetNameMap[name] = true;
	end
	local function IsTarget(instance)
		return TargetNameMap[instance.Name] ~= nil;
	end
	local function FindHead(model)
		if model:IsA("Model") then
			local head = model:FindFirstChild("Head");
			if (head and head:IsA("BasePart")) then
				return head;
			end
		end
		if (model:IsA("BasePart") and IsTarget(model)) then
			return model;
		end
		return nil;
	end
	local function GetAllTargets()
		local targets = {};
		local function SearchInstance(instance)
			if IsTarget(instance) then
				local head = FindHead(instance);
				if head then
					table.insert(targets, head);
				end
			end
			for _, child in ipairs(instance:GetChildren()) do
				SearchInstance(child);
			end
		end
		SearchInstance(workspace);
		return targets;
	end
	local function GetClosestTarget()
		local targets = GetAllTargets();
		local closestTarget = nil;
		local closestDistance = DETECT_DISTANCE;
		local character = LocalPlayer.Character;
		if not character then
			return nil;
		end
		local rootPart = character:FindFirstChild("HumanoidRootPart");
		if not rootPart then
			return nil;
		end
		local playerPosition = rootPart.Position;
		for _, targetHead in ipairs(targets) do
			local distance = (targetHead.Position - playerPosition).Magnitude;
			if (distance < closestDistance) then
				closestTarget = targetHead;
				closestDistance = distance;
			end
		end
		return closestTarget;
	end
	local function LockCameraOnTarget(target)
		if not target then
			return;
		end
		local character = LocalPlayer.Character;
		if not character then
			return;
		end
		local rootPart = character:FindFirstChild("HumanoidRootPart");
		if not rootPart then
			return;
		end
		local lookVector = (target.Position - rootPart.Position).Unit;
		local targetCFrame = CFrame.new(Camera.CFrame.Position, target.Position);
		local smoothValue = 1 - Smoothness;
		Camera.CFrame = Camera.CFrame:Lerp(targetCFrame, smoothValue);
	end
	local function TrackTargets()
		if not IsTracking then
			return;
		end
		local closestTarget = GetClosestTarget();
		if closestTarget then
			LockCameraOnTarget(closestTarget);
		end
	end
	local trackingConnection = nil;
	local function StartTracking()
		if trackingConnection then
			return;
		end
		trackingConnection = RunService:BindToRenderStep("TargetTracker", Enum.RenderPriority.Camera.Value + 1, TrackTargets);
	end
	local function StopTracking()
		if not trackingConnection then
			return;
		end
		RunService:UnbindFromRenderStep("TargetTracker");
		trackingConnection = nil;
	end
	local Toggle = Tab:CreateToggle({Name="Entity Tracker",CurrentValue=false,Flag="EntityTracker",Callback=function(Value)
		IsTracking = Value;
		if IsTracking then
			StartTracking();
		else
			StopTracking();
		end
	end});
	local Slider = Tab:CreateSlider({Name="Tracking Smoothness",Range={0,100},Increment=5,Suffix="%",CurrentValue=90,Flag="TrackerSmoothness",Callback=function(Value)
		Smoothness = Value / 100;
	end});
	Smoothness = 0.9;
	local function cleanup()
		StopTracking();
		Toggle:Set(false);
	end
	return cleanup;
end
